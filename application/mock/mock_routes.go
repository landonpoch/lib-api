// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/landonpoch/lib-api/application (interfaces: BookRepository)

// Package application_mock is a generated GoMock package.
package application_mock

import (
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	domain "github.com/landonpoch/lib-api/domain"
	reflect "reflect"
)

// MockBookRepository is a mock of BookRepository interface
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method
func (m *MockBookRepository) CreateBook(arg0 domain.Book) error {
	ret := m.ctrl.Call(m, "CreateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook
func (mr *MockBookRepositoryMockRecorder) CreateBook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBookRepository)(nil).CreateBook), arg0)
}

// DeleteBook mocks base method
func (m *MockBookRepository) DeleteBook(arg0 uuid.UUID) error {
	ret := m.ctrl.Call(m, "DeleteBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBook indicates an expected call of DeleteBook
func (mr *MockBookRepositoryMockRecorder) DeleteBook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBook", reflect.TypeOf((*MockBookRepository)(nil).DeleteBook), arg0)
}

// GetBook mocks base method
func (m *MockBookRepository) GetBook(arg0 uuid.UUID) (*domain.Book, error) {
	ret := m.ctrl.Call(m, "GetBook", arg0)
	ret0, _ := ret[0].(*domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook
func (mr *MockBookRepositoryMockRecorder) GetBook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBookRepository)(nil).GetBook), arg0)
}

// GetBooks mocks base method
func (m *MockBookRepository) GetBooks(arg0, arg1 int) (domain.Library, error) {
	ret := m.ctrl.Call(m, "GetBooks", arg0, arg1)
	ret0, _ := ret[0].(domain.Library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooks indicates an expected call of GetBooks
func (mr *MockBookRepositoryMockRecorder) GetBooks(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockBookRepository)(nil).GetBooks), arg0, arg1)
}

// UpdateBook mocks base method
func (m *MockBookRepository) UpdateBook(arg0 domain.Book) error {
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook
func (mr *MockBookRepositoryMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), arg0)
}
